system_prompt = """
1. Diagnose (Interpret the Report)
Don’t treat it as “numbers for the sake of numbers.” Ask:

Which 2–3 issues stand out?

Example: 15 fillers per minute, monotone pitch, poor eye contact.
Which issues actually hurt clarity/impact the most?

Pace might be fine, but fillers + weak structure may kill persuasion.
👉 Tip: Circle one vocal issue + one body language issue to focus on first.


2. Prioritize (Pick Focus Areas)
Create a simple improvement backlog, like software bugs:

P0 = Fix immediately (major distraction: 30 “um”s/min)
P1 = Important but not urgent (slouching posture)
P2 = Nice-to-have (gestures slightly repetitive)
👉 Don’t try to fix everything at once — you’ll overwhelm yourself.


3. Prescribe (Turn Metrics into Action)
Translate ML metrics into specific practice drills. For example:

Too many fillers → Practice pausing silently when stuck (record 2 mins with forced pauses).
Flat tone → Mark transcripts with ↑ and ↓ to practice vocal variety.
Poor eye contact → Record 1-min talks while staring into the camera lens only.
Wordiness → Rewrite transcript to cut 30% of words, then re-speak.
👉 Each metric becomes a drill, not just feedback.

"""


import re
import os
from datetime import datetime
from typing import Dict, List, Any, Tuple
from collections import Counter
import textstat
from ..utils.ai_agent import BasicAIAgent

class ReportAnalyzer:
    """Advanced Report and linguistic analysis focusing on communication effectiveness"""
    
    def __init__(self, api_key: str):
        """Initialize with OpenAI API key for AI analysis"""
        self.ai_agent = BasicAIAgent(api_key)

    def analyze_report(self, report_path: str) -> Dict[str, Any]:
        """Analyze the markdown report file and return AI insights"""
        try:
            # Read the markdown report file
            with open(report_path, 'r', encoding='utf-8') as f:
                report_content = f.read()
            
            # Generate AI analysis using the system prompt
            response = self.ai_agent.generate_response(
                prompt=f"Please analyze this comprehensive video analysis report and provide actionable insights:\n\n{report_content}",
                system_prompt=system_prompt,
                temperature=0.3,
                max_tokens=2000
            )
            
            return {
                "analysis_complete": True,
                "ai_insights": response,
                "report_path": report_path,
                "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }
            
        except Exception as e:
            return {
                "analysis_complete": False,
                "error": str(e),
                "report_path": report_path,
                "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }
    
    def save_final_report(self, report_path: str, ai_insights: str) -> str:
        """Save the final report with AI insights appended"""
        try:
            # # Read the original report
            # with open(report_path, 'r', encoding='utf-8') as f:
            #     original_content = f.read()
            
            # Create final report content
            # final_content = original_content + "\n\n" + "="*80 + "\n"
            final_content = "# 🤖 AI-Powered Analysis & Recommendations\n"
            final_content += f"**Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
            final_content += ai_insights + "\n\n"
            final_content += "="*80 + "\n"
            final_content += "*Final report generated by Video Analysis System with AI insights*\n"
            
            # Generate final report filename
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            final_report_path = f"reports/Final_insights_and_recommendations_{timestamp}.md"
            
            # Save the final report
            with open(final_report_path, 'w', encoding='utf-8') as f:
                f.write(final_content)
            
            return final_report_path
            
        except Exception as e:
            raise Exception(f"Failed to save final report: {str(e)}")